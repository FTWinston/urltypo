{"version":3,"sources":["components/UrlForm.tsx","functions/urlExists.ts","components/ResultList.tsx","functions/generateUrlTypos.ts","functions/filterExistingUrls.ts","functions/fixupUrl.ts","index.tsx","components/App.tsx"],"names":["UrlForm","props","useState","url","setUrl","valueChanged","useMemo","e","target","value","onSubmit","onClear","submitted","preventDefault","clear","className","type","placeholder","onChange","disabled","onClick","urlExists","a","async","fetch","mode","ResultList","urls","map","r","key","href","rel","pos","indexOf","substr","stripScheme","generateUrlTypos","urlData","URL","host","hostVariations","Set","text","results","i","length","push","missEachCharacter","duplicateEachCharacter","swapEachCharacterPair","Array","from","filter","hostname","protocol","pathname","search","filterExistingUrls","checkingAll","Promise","all","checkResults","_url","index","fixupUrl","startsWith","ReactDOM","render","status","setStatus","setResults","allTypoUrls","typoUrls","cleared","undefined","statusDisplay","resultDisplay","document","getElementById"],"mappings":"8RASaA,G,YAAoC,SAAAC,GAAU,IAAD,EAChCC,mBAAS,IADuB,mBAC/CC,EAD+C,KAC1CC,EAD0C,KAGhDC,EAAeC,mBACjB,kBAAM,SAACC,GAAD,OAA4CH,EAAOG,EAAEC,OAAOC,UAChE,IAGEC,EAAsBT,EAAtBS,SAAUC,EAAYV,EAAZU,QACZC,EAAYN,mBACd,kBAAM,SAACC,GACHA,EAAEM,iBACFH,EAASP,MAEb,CAACO,EAAUP,IAGTW,EAAQR,mBACV,kBAAM,WACFF,EAAO,IACHO,GAAWA,OAEnB,CAACA,IAGL,OACI,0BAAMI,UAAU,UAAUL,SAAUE,GAChC,2BACII,KAAK,OACLD,UAAU,iBACVE,YAAY,qBACZR,MAAON,EACPe,SAAUb,EACVc,SAAUlB,EAAMkB,WAGpB,yBAAKJ,UAAU,oBACX,2BACIC,KAAK,SACLD,UAAU,0CACVN,MAAM,QACNU,SAAUlB,EAAMkB,WAEpB,2BACIH,KAAK,SACLD,UAAU,kBACVK,QAASN,EACTL,MAAM,cCxDnB,SAAeY,EAAUlB,GAAzB,SAAAmB,EAAAC,OAAA,2EAAAD,EAAA,MAGOE,MAAMrB,EAAK,CAAEsB,KAAM,aAH1B,iCAIQ,GAJR,0DAQQ,GARR,uD,UCOMC,EAAuC,SAAAzB,GAChD,OACI,wBAAIc,UAAU,cACTd,EAAM0B,KAAKC,KAAI,SAAAC,GAAC,OACb,wBAAIC,IAAKD,EAAGd,UAAU,oBAClB,uBAAGgB,KAAMF,EAAGrB,OAAO,SAASwB,IAAI,uBAOpD,SAAqB7B,GACjB,IAAM8B,EAAM9B,EAAI+B,QAAQ,MAExB,OAAgB,IAATD,EACD9B,EACAA,EAAIgC,OAAOF,EAAM,GAZgDG,CAAYP,U,WCZhF,SAASQ,EAAiBlC,GAC7B,IAAMmC,EAAU,IAAIC,IAAIpC,GAElBqC,EAAOF,EAAQE,KAEfC,EAAiB,IAAIC,IAAJ,sBAW3B,SAA2BC,GAGvB,IAFA,IAAMC,EAAoB,GAEjBC,EAAE,EAAGA,EAAEF,EAAKG,OAAQD,IACzBD,EAAQG,KAAR,UAAgBJ,EAAKR,OAAO,EAAGU,IAA/B,OAAoCF,EAAKR,OAAOU,EAAI,KAGxD,OAAOD,EAjBAI,CAAkBR,IADF,YA+B3B,SAAgCG,GAG5B,IAFA,IAAMC,EAAoB,GAEjBC,EAAE,EAAGA,EAAEF,EAAKG,OAAQD,IACzBD,EAAQG,KAAR,UAAgBJ,EAAKR,OAAO,EAAGU,IAA/B,OAAoCF,EAAKE,IAAzC,OAA8CF,EAAKR,OAAOU,KAG9D,OAAOD,EApCAK,CAAuBT,IAFP,YAqB3B,SAA+BG,GAG3B,IAFA,IAAMC,EAAoB,GAEjBC,EAAE,EAAGA,EAAEF,EAAKG,OAAQD,IACzBD,EAAQG,KAAR,UAAgBJ,EAAKR,OAAO,EAAGU,EAAI,IAAnC,OAAwCF,EAAKE,IAA7C,OAAkDF,EAAKE,EAAE,IAAzD,OAA8DF,EAAKR,OAAOU,EAAI,KAGlF,OAAOD,EAzBAM,CAAsBV,MAG7B,OAAOW,MAAMC,KAAKX,GACbY,QAAO,SAAAC,GAAQ,OAAIA,IAAad,KAChCZ,KAAI,SAAA0B,GAAQ,gBAAOhB,EAAQiB,SAAf,aAA4BD,GAA5B,OAAuChB,EAAQkB,UAA/C,OAA0DlB,EAAQmB,WCXhF,SAAeC,EAAmB/B,GAAlC,iBAAAL,EAAAC,OAAA,uDACGoC,EAAchC,EAAKC,KAAI,SAAAzB,GAAG,OAAIkB,EAAUlB,MAD3C,WAAAmB,EAAA,MAGwBsC,QAAQC,IAAIF,IAHpC,cAGGG,EAHH,yBAKInC,EAAK0B,QAAO,SAACU,EAAMC,GAAP,OAAiBF,EAAaE,OAL9C,qCCFA,SAASC,EAAS9D,GACrB,OAAOA,EAAI+D,WAAW,QAChB/D,EACA,UAAYA,ECEtBgE,IAASC,OAAO,mBCIa,WAAO,IAAD,EACHlE,qBADG,mBACxBmE,EADwB,KAChBC,EADgB,OAEDpE,qBAFC,mBAExB0C,EAFwB,KAEf2B,EAFe,KAIzB3D,EAAYN,mBACd,kBAAM,SAAOH,GAAP,iBAAAmB,EAAAC,OAAA,uDACFpB,EAAM8D,EAAS9D,GADb,WAAAmB,EAAA,MAEqBD,EAAUlB,IAF/B,wCAKEmE,EAAU,wBALZ,iCASIE,EAAcnC,EAAiBlC,GAErCmE,EAAU,YAAD,OAAaE,EAAY1B,OAAzB,uBAXP,YAAAxB,EAAA,MAaqBoC,EAAmBc,IAbxC,QAaIC,EAbJ,OAeFF,EAAWE,GAEXH,EAAU,WAAD,OAAYE,EAAY1B,OAAxB,4BAAkD2B,EAAS3B,OAA3D,cAjBP,yCAmBN,IAGE4B,EAAUpE,mBACZ,kBAAM,WACFiE,OAAWI,GACXL,OAAUK,MAEd,IAGEC,OAA2BD,IAAXN,OAChBM,EACA,yBAAK5D,UAAU,eAAesD,GAE9BQ,OAA4BF,IAAZ/B,GAA4C,IAAnBA,EAAQE,YACjD6B,EACA,kBAAC,EAAD,CAAYhD,KAAMiB,IAExB,OACI,yBAAK7B,UAAU,OACX,4BAAQA,UAAU,eACd,uEACA,kBAAC,EAAD,CACIL,SAAUE,EACVD,QAAS+D,EACTvD,cAAqBwD,IAAXN,KAIjBO,EACAC,KD3DG,MAASC,SAASC,eAAe,W","file":"static/js/main.b1ee5db2.chunk.js","sourcesContent":["import React, { FunctionComponent, useState, useMemo } from 'react';\r\nimport './UrlForm.css';\r\n\r\ninterface Props {\r\n    onSubmit: (url: string) => void;\r\n    onClear?: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const UrlForm: FunctionComponent<Props> = props => {\r\n    const [url, setUrl] = useState('');\r\n\r\n    const valueChanged = useMemo(\r\n        () => (e: React.ChangeEvent<HTMLInputElement>) => setUrl(e.target.value)\r\n        , []\r\n    );\r\n\r\n    const { onSubmit, onClear } = props;\r\n    const submitted = useMemo(\r\n        () => (e: React.FormEvent<HTMLFormElement>) => {\r\n            e.preventDefault();\r\n            onSubmit(url);\r\n        },\r\n        [onSubmit, url]\r\n    );\r\n\r\n    const clear = useMemo(\r\n        () => () => {\r\n            setUrl('');\r\n            if (onClear) { onClear(); }\r\n        },\r\n        [onClear]\r\n    );\r\n\r\n    return (\r\n        <form className=\"urlForm\" onSubmit={submitted}>\r\n            <input\r\n                type=\"text\"\r\n                className=\"urlForm__input\"\r\n                placeholder=\"Enter URL to check\"\r\n                value={url}\r\n                onChange={valueChanged}\r\n                disabled={props.disabled}\r\n            />\r\n\r\n            <div className=\"urlForm__buttons\">\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"urlForm__button urlForm__button--submit\"\r\n                    value=\"Check\"\r\n                    disabled={props.disabled}\r\n                />\r\n                <input\r\n                    type=\"button\"\r\n                    className=\"urlForm__button\"\r\n                    onClick={clear}\r\n                    value=\"Clear\"\r\n                />\r\n            </div>\r\n        </form>\r\n    );\r\n}","export async function urlExists(url: string) {\r\n    try\r\n    {\r\n        await fetch(url, { mode: 'no-cors' });\r\n        return true;\r\n    }\r\n    catch\r\n    {\r\n        return false;\r\n    }\r\n}","import React, { FunctionComponent } from 'react';\r\nimport './ResultList.css';\r\n\r\ninterface Props {\r\n    urls: string[];\r\n}\r\n\r\nexport const ResultList: FunctionComponent<Props> = props => {\r\n    return (\r\n        <ol className=\"resultList\">\r\n            {props.urls.map(r => (\r\n                <li key={r} className=\"resultList__item\">\r\n                    <a href={r} target=\"_blank\" rel=\"noopener noreferrer\">{stripScheme(r)}</a>\r\n                </li>\r\n            ))}\r\n        </ol>\r\n    );\r\n}\r\n\r\nfunction stripScheme(url: string) {\r\n    const pos = url.indexOf('//');\r\n\r\n    return pos === -1\r\n        ? url\r\n        : url.substr(pos + 2);\r\n}","export function generateUrlTypos(url: string) {\r\n    const urlData = new URL(url);\r\n\r\n    const host = urlData.host;\r\n\r\n    const hostVariations = new Set([\r\n        ...missEachCharacter(host),\r\n        ...duplicateEachCharacter(host),\r\n        ...swapEachCharacterPair(host),\r\n    ]);\r\n\r\n    return Array.from(hostVariations)\r\n        .filter(hostname => hostname !== host)\r\n        .map(hostname => `${urlData.protocol}//${hostname}${urlData.pathname}${urlData.search}`);\r\n}\r\n\r\nfunction missEachCharacter(text: string) {\r\n    const results: string[] = [];\r\n\r\n    for (let i=0; i<text.length; i++) {\r\n        results.push(`${text.substr(0, i)}${text.substr(i + 1)}`);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction swapEachCharacterPair(text: string) {\r\n    const results: string[] = [];\r\n\r\n    for (let i=1; i<text.length; i++) {\r\n        results.push(`${text.substr(0, i - 1)}${text[i]}${text[i-1]}${text.substr(i + 1)}`);\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nfunction duplicateEachCharacter(text: string) {\r\n    const results: string[] = [];\r\n\r\n    for (let i=0; i<text.length; i++) {\r\n        results.push(`${text.substr(0, i)}${text[i]}${text.substr(i)}`);\r\n    }\r\n\r\n    return results;\r\n}","import { urlExists } from './urlExists';\r\n\r\nexport async function filterExistingUrls(urls: string[]) {\r\n    const checkingAll = urls.map(url => urlExists(url));\r\n\r\n    const checkResults = await Promise.all(checkingAll);\r\n\r\n    return urls.filter((_url, index) => checkResults[index]);\r\n}","export function fixupUrl(url: string) {\r\n    return url.startsWith('http')\r\n        ? url\r\n        : 'http://' + url;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));","import React, { useState, useMemo } from 'react';\nimport './App.css';\nimport { UrlForm } from './UrlForm';\nimport { urlExists } from '../functions/urlExists';\nimport { ResultList } from './ResultList';\nimport { generateUrlTypos } from '../functions/generateUrlTypos';\nimport { filterExistingUrls } from '../functions/filterExistingUrls';\nimport { fixupUrl } from '../functions/fixupUrl';\n\nexport const App: React.FC = () => {\n    const [status, setStatus] = useState<string>();\n    const [results, setResults] = useState<string[]>();\n\n    const submitted = useMemo(\n        () => async (url: string) => {\n            url = fixupUrl(url);\n            const urlValid = await urlExists(url);\n\n            if (!urlValid) {\n                setStatus('Error: URL not found');\n                return;\n            }\n\n            const allTypoUrls = generateUrlTypos(url);\n\n            setStatus(`Checking ${allTypoUrls.length} possible typos...`);\n\n            const typoUrls = await filterExistingUrls(allTypoUrls);\n            \n            setResults(typoUrls);\n\n            setStatus(`Checked ${allTypoUrls.length} possible typos, ${typoUrls.length} exist(s)`);\n        },\n        []\n    );\n\n    const cleared = useMemo(\n        () => () => {\n            setResults(undefined);\n            setStatus(undefined);\n        },\n        []\n    );\n\n    const statusDisplay = status === undefined\n        ? undefined\n        : <div className=\"app__status\">{status}</div>\n\n    const resultDisplay = results === undefined || results.length === 0\n        ? undefined\n        : <ResultList urls={results} />\n\n    return (\n        <div className=\"app\">\n            <header className=\"app__header\">\n                <p>Quickly check what typos of a URL exist.</p>\n                <UrlForm\n                    onSubmit={submitted}\n                    onClear={cleared}\n                    disabled={status !== undefined}\n                />\n            </header>\n\n            {statusDisplay}\n            {resultDisplay}\n        </div>\n    );\n}"],"sourceRoot":""}